#[derive(Clone, Copy, PartialEq, Debug)]
pub enum Square {
    A1,
    A2,
    A3,
    A4,
    A5,
    A6,
    A7,
    A8,
    B1,
    B2,
    B3,
    B4,
    B5,
    B6,
    B7,
    B8,
    C1,
    C2,
    C3,
    C4,
    C5,
    C6,
    C7,
    C8,
    D1,
    D2,
    D3,
    D4,
    D5,
    D6,
    D7,
    D8,
    E1,
    E2,
    E3,
    E4,
    E5,
    E6,
    E7,
    E8,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    G1,
    G2,
    G3,
    G4,
    G5,
    G6,
    G7,
    G8,
    H1,
    H2,
    H3,
    H4,
    H5,
    H6,
    H7,
    H8,
}

impl Square {
    pub fn to_bit(&self) -> u64 {
        match self {
            Self::A1 => 1 << 0,
            Self::B1 => 1 << 1,
            Self::C1 => 1 << 2,
            Self::D1 => 1 << 3,
            Self::E1 => 1 << 4,
            Self::F1 => 1 << 5,
            Self::G1 => 1 << 6,
            Self::H1 => 1 << 7,
            Self::A2 => 1 << 8,
            Self::B2 => 1 << 9,
            Self::C2 => 1 << 10,
            Self::D2 => 1 << 11,
            Self::E2 => 1 << 12,
            Self::F2 => 1 << 13,
            Self::G2 => 1 << 14,
            Self::H2 => 1 << 15,
            Self::A3 => 1 << 16,
            Self::B3 => 1 << 17,
            Self::C3 => 1 << 18,
            Self::D3 => 1 << 19,
            Self::E3 => 1 << 20,
            Self::F3 => 1 << 21,
            Self::G3 => 1 << 22,
            Self::H3 => 1 << 23,
            Self::A4 => 1 << 24,
            Self::B4 => 1 << 25,
            Self::C4 => 1 << 26,
            Self::D4 => 1 << 27,
            Self::E4 => 1 << 28,
            Self::F4 => 1 << 29,
            Self::G4 => 1 << 30,
            Self::H4 => 1 << 31,
            Self::A5 => 1 << 32,
            Self::B5 => 1 << 33,
            Self::C5 => 1 << 34,
            Self::D5 => 1 << 35,
            Self::E5 => 1 << 36,
            Self::F5 => 1 << 37,
            Self::G5 => 1 << 38,
            Self::H5 => 1 << 39,
            Self::A6 => 1 << 40,
            Self::B6 => 1 << 41,
            Self::C6 => 1 << 42,
            Self::D6 => 1 << 43,
            Self::E6 => 1 << 44,
            Self::F6 => 1 << 45,
            Self::G6 => 1 << 46,
            Self::H6 => 1 << 47,
            Self::A7 => 1 << 48,
            Self::B7 => 1 << 49,
            Self::C7 => 1 << 50,
            Self::D7 => 1 << 51,
            Self::E7 => 1 << 52,
            Self::F7 => 1 << 53,
            Self::G7 => 1 << 54,
            Self::H7 => 1 << 55,
            Self::A8 => 1 << 56,
            Self::B8 => 1 << 57,
            Self::C8 => 1 << 58,
            Self::D8 => 1 << 59,
            Self::E8 => 1 << 60,
            Self::F8 => 1 << 61,
            Self::G8 => 1 << 62,
            Self::H8 => 1 << 63,
        }
    }

    pub fn from_bit(bb: u64) -> Self {
        let maybe_square = match bb {
            b if b == (1 << 0) => Some(Self::A1),
            b if b == (1 << 1) => Some(Self::B1),
            b if b == (1 << 2) => Some(Self::C1),
            b if b == (1 << 3) => Some(Self::D1),
            b if b == (1 << 4) => Some(Self::E1),
            b if b == (1 << 5) => Some(Self::F1),
            b if b == (1 << 6) => Some(Self::G1),
            b if b == (1 << 7) => Some(Self::H1),
            b if b == (1 << 8) => Some(Self::A2),
            b if b == (1 << 9) => Some(Self::B2),
            b if b == (1 << 10) => Some(Self::C2),
            b if b == (1 << 11) => Some(Self::D2),
            b if b == (1 << 12) => Some(Self::E2),
            b if b == (1 << 13) => Some(Self::F2),
            b if b == (1 << 14) => Some(Self::G2),
            b if b == (1 << 15) => Some(Self::H2),
            b if b == (1 << 16) => Some(Self::A3),
            b if b == (1 << 17) => Some(Self::B3),
            b if b == (1 << 18) => Some(Self::C3),
            b if b == (1 << 19) => Some(Self::D3),
            b if b == (1 << 20) => Some(Self::E3),
            b if b == (1 << 21) => Some(Self::F3),
            b if b == (1 << 22) => Some(Self::G3),
            b if b == (1 << 23) => Some(Self::H3),
            b if b == (1 << 24) => Some(Self::A4),
            b if b == (1 << 25) => Some(Self::B4),
            b if b == (1 << 26) => Some(Self::C4),
            b if b == (1 << 27) => Some(Self::D4),
            b if b == (1 << 28) => Some(Self::E4),
            b if b == (1 << 29) => Some(Self::F4),
            b if b == (1 << 30) => Some(Self::G4),
            b if b == (1 << 31) => Some(Self::H4),
            b if b == (1 << 32) => Some(Self::A5),
            b if b == (1 << 33) => Some(Self::B5),
            b if b == (1 << 34) => Some(Self::C5),
            b if b == (1 << 35) => Some(Self::D5),
            b if b == (1 << 36) => Some(Self::E5),
            b if b == (1 << 37) => Some(Self::F5),
            b if b == (1 << 38) => Some(Self::G5),
            b if b == (1 << 39) => Some(Self::H5),
            b if b == (1 << 40) => Some(Self::A6),
            b if b == (1 << 41) => Some(Self::B6),
            b if b == (1 << 42) => Some(Self::C6),
            b if b == (1 << 43) => Some(Self::D6),
            b if b == (1 << 44) => Some(Self::E6),
            b if b == (1 << 45) => Some(Self::F6),
            b if b == (1 << 46) => Some(Self::G6),
            b if b == (1 << 47) => Some(Self::H6),
            b if b == (1 << 48) => Some(Self::A7),
            b if b == (1 << 49) => Some(Self::B7),
            b if b == (1 << 50) => Some(Self::C7),
            b if b == (1 << 51) => Some(Self::D7),
            b if b == (1 << 52) => Some(Self::E7),
            b if b == (1 << 53) => Some(Self::F7),
            b if b == (1 << 54) => Some(Self::G7),
            b if b == (1 << 55) => Some(Self::H7),
            b if b == (1 << 56) => Some(Self::A8),
            b if b == (1 << 57) => Some(Self::B8),
            b if b == (1 << 58) => Some(Self::C8),
            b if b == (1 << 59) => Some(Self::D8),
            b if b == (1 << 60) => Some(Self::E8),
            b if b == (1 << 61) => Some(Self::F8),
            b if b == (1 << 62) => Some(Self::G8),
            b if b == (1 << 63) => Some(Self::H8),

            _ => None,
        };
        maybe_square.unwrap()
    }

    pub fn from_row_col(row: usize, col: usize) -> Self {
        let maybe_square = match (row, col) {
            (0, 0) => Some(Self::A1),
            (1, 0) => Some(Self::A2),
            (2, 0) => Some(Self::A3),
            (3, 0) => Some(Self::A4),
            (4, 0) => Some(Self::A5),
            (5, 0) => Some(Self::A6),
            (6, 0) => Some(Self::A7),
            (7, 0) => Some(Self::A8),
            (0, 1) => Some(Self::B1),
            (1, 1) => Some(Self::B2),
            (2, 1) => Some(Self::B3),
            (3, 1) => Some(Self::B4),
            (4, 1) => Some(Self::B5),
            (5, 1) => Some(Self::B6),
            (6, 1) => Some(Self::B7),
            (7, 1) => Some(Self::B8),
            (0, 2) => Some(Self::C1),
            (1, 2) => Some(Self::C2),
            (2, 2) => Some(Self::C3),
            (3, 2) => Some(Self::C4),
            (4, 2) => Some(Self::C5),
            (5, 2) => Some(Self::C6),
            (6, 2) => Some(Self::C7),
            (7, 2) => Some(Self::C8),
            (0, 3) => Some(Self::D1),
            (1, 3) => Some(Self::D2),
            (2, 3) => Some(Self::D3),
            (3, 3) => Some(Self::D4),
            (4, 3) => Some(Self::D5),
            (5, 3) => Some(Self::D6),
            (6, 3) => Some(Self::D7),
            (7, 3) => Some(Self::D8),
            (0, 4) => Some(Self::E1),
            (1, 4) => Some(Self::E2),
            (2, 4) => Some(Self::E3),
            (3, 4) => Some(Self::E4),
            (4, 4) => Some(Self::E5),
            (5, 4) => Some(Self::E6),
            (6, 4) => Some(Self::E7),
            (7, 4) => Some(Self::E8),
            (0, 5) => Some(Self::F1),
            (1, 5) => Some(Self::F2),
            (2, 5) => Some(Self::F3),
            (3, 5) => Some(Self::F4),
            (4, 5) => Some(Self::F5),
            (5, 5) => Some(Self::F6),
            (6, 5) => Some(Self::F7),
            (7, 5) => Some(Self::F8),
            (0, 6) => Some(Self::G1),
            (1, 6) => Some(Self::G2),
            (2, 6) => Some(Self::G3),
            (3, 6) => Some(Self::G4),
            (4, 6) => Some(Self::G5),
            (5, 6) => Some(Self::G6),
            (6, 6) => Some(Self::G7),
            (7, 6) => Some(Self::G8),
            (0, 7) => Some(Self::H1),
            (1, 7) => Some(Self::H2),
            (2, 7) => Some(Self::H3),
            (3, 7) => Some(Self::H4),
            (4, 7) => Some(Self::H5),
            (5, 7) => Some(Self::H6),
            (6, 7) => Some(Self::H7),
            (7, 7) => Some(Self::H8),
            (_, _) => None,
        };

        maybe_square.unwrap()
    }

    pub fn ordered() -> Vec<Square> {
        vec![
            Self::A1,
            Self::A2,
            Self::A3,
            Self::A4,
            Self::A5,
            Self::A6,
            Self::A7,
            Self::A8,
            Self::B1,
            Self::B2,
            Self::B3,
            Self::B4,
            Self::B5,
            Self::B6,
            Self::B7,
            Self::B8,
            Self::C1,
            Self::C2,
            Self::C3,
            Self::C4,
            Self::C5,
            Self::C6,
            Self::C7,
            Self::C8,
            Self::D1,
            Self::D2,
            Self::D3,
            Self::D4,
            Self::D5,
            Self::D6,
            Self::D7,
            Self::D8,
            Self::E1,
            Self::E2,
            Self::E3,
            Self::E4,
            Self::E5,
            Self::E6,
            Self::E7,
            Self::E8,
            Self::F1,
            Self::F2,
            Self::F3,
            Self::F4,
            Self::F5,
            Self::F6,
            Self::F7,
            Self::F8,
            Self::G1,
            Self::G2,
            Self::G3,
            Self::G4,
            Self::G5,
            Self::G6,
            Self::G7,
            Self::G8,
            Self::H1,
            Self::H2,
            Self::H3,
            Self::H4,
            Self::H5,
            Self::H6,
            Self::H7,
            Self::H8,
        ]
    }

    pub fn from_algebraic(algebraic_coord: &str) -> Self {
        let maybe_square = match algebraic_coord.to_uppercase().as_str() {
            "A1" => Some(Self::A1),
            "A2" => Some(Self::A2),
            "A3" => Some(Self::A3),
            "A4" => Some(Self::A4),
            "A5" => Some(Self::A5),
            "A6" => Some(Self::A6),
            "A7" => Some(Self::A7),
            "A8" => Some(Self::A8),
            "B1" => Some(Self::B1),
            "B2" => Some(Self::B2),
            "B3" => Some(Self::B3),
            "B4" => Some(Self::B4),
            "B5" => Some(Self::B5),
            "B6" => Some(Self::B6),
            "B7" => Some(Self::B7),
            "B8" => Some(Self::B8),
            "C1" => Some(Self::C1),
            "C2" => Some(Self::C2),
            "C3" => Some(Self::C3),
            "C4" => Some(Self::C4),
            "C5" => Some(Self::C5),
            "C6" => Some(Self::C6),
            "C7" => Some(Self::C7),
            "C8" => Some(Self::C8),
            "D1" => Some(Self::D1),
            "D2" => Some(Self::D2),
            "D3" => Some(Self::D3),
            "D4" => Some(Self::D4),
            "D5" => Some(Self::D5),
            "D6" => Some(Self::D6),
            "D7" => Some(Self::D7),
            "D8" => Some(Self::D8),
            "E1" => Some(Self::E1),
            "E2" => Some(Self::E2),
            "E3" => Some(Self::E3),
            "E4" => Some(Self::E4),
            "E5" => Some(Self::E5),
            "E6" => Some(Self::E6),
            "E7" => Some(Self::E7),
            "E8" => Some(Self::E8),
            "F1" => Some(Self::F1),
            "F2" => Some(Self::F2),
            "F3" => Some(Self::F3),
            "F4" => Some(Self::F4),
            "F5" => Some(Self::F5),
            "F6" => Some(Self::F6),
            "F7" => Some(Self::F7),
            "F8" => Some(Self::F8),
            "G1" => Some(Self::G1),
            "G2" => Some(Self::G2),
            "G3" => Some(Self::G3),
            "G4" => Some(Self::G4),
            "G5" => Some(Self::G5),
            "G6" => Some(Self::G6),
            "G7" => Some(Self::G7),
            "G8" => Some(Self::G8),
            "H1" => Some(Self::H1),
            "H2" => Some(Self::H2),
            "H3" => Some(Self::H3),
            "H4" => Some(Self::H4),
            "H5" => Some(Self::H5),
            "H6" => Some(Self::H6),
            "H7" => Some(Self::H7),
            "H8" => Some(Self::H8),
            _ => None,
        };

        maybe_square.unwrap()
    }

    pub fn to_algebraic(&self) -> &'static str {
        match self {
            Self::A1 => "A1",
            Self::A2 => "A2",
            Self::A3 => "A3",
            Self::A4 => "A4",
            Self::A5 => "A5",
            Self::A6 => "A6",
            Self::A7 => "A7",
            Self::A8 => "A8",
            Self::B1 => "B1",
            Self::B2 => "B2",
            Self::B3 => "B3",
            Self::B4 => "B4",
            Self::B5 => "B5",
            Self::B6 => "B6",
            Self::B7 => "B7",
            Self::B8 => "B8",
            Self::C1 => "C1",
            Self::C2 => "C2",
            Self::C3 => "C3",
            Self::C4 => "C4",
            Self::C5 => "C5",
            Self::C6 => "C6",
            Self::C7 => "C7",
            Self::C8 => "C8",
            Self::D1 => "D1",
            Self::D2 => "D2",
            Self::D3 => "D3",
            Self::D4 => "D4",
            Self::D5 => "D5",
            Self::D6 => "D6",
            Self::D7 => "D7",
            Self::D8 => "D8",
            Self::E1 => "E1",
            Self::E2 => "E2",
            Self::E3 => "E3",
            Self::E4 => "E4",
            Self::E5 => "E5",
            Self::E6 => "E6",
            Self::E7 => "E7",
            Self::E8 => "E8",
            Self::F1 => "F1",
            Self::F2 => "F2",
            Self::F3 => "F3",
            Self::F4 => "F4",
            Self::F5 => "F5",
            Self::F6 => "F6",
            Self::F7 => "F7",
            Self::F8 => "F8",
            Self::G1 => "G1",
            Self::G2 => "G2",
            Self::G3 => "G3",
            Self::G4 => "G4",
            Self::G5 => "G5",
            Self::G6 => "G6",
            Self::G7 => "G7",
            Self::G8 => "G8",
            Self::H1 => "H1",
            Self::H2 => "H2",
            Self::H3 => "H3",
            Self::H4 => "H4",
            Self::H5 => "H5",
            Self::H6 => "H6",
            Self::H7 => "H7",
            Self::H8 => "H8",
        }
    }
}
