use crate::board::piece::Piece;

pub fn get(piece: Piece) -> [f32; 64] {
    match piece {
        Piece::Pawn => tables::PAWN_BONUSES,
        Piece::Knight => tables::KNIGHT_BONUSES,
        Piece::Bishop => tables::BISHOP_BONUSES,
        Piece::Rook => tables::ROOK_BONUSES,
        Piece::Queen => tables::QUEEN_BONUSES,
        Piece::King => tables::KING_BONUSES,
    }
}

#[rustfmt::skip]
mod tables {
    // all tables are symmetric with square::ORDERED
    pub const PAWN_BONUSES: [f32; 64] = [
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         5., 10., 10.,-20.,-20., 10., 10.,  5.,
         5., -5.,-10.,  0.,  0.,-10., -5.,  5.,
         0.,  0.,  0., 20., 20.,  0.,  0.,  0.,
         5.,  5., 10., 25., 25., 10.,  5.,  5.,
        10., 10., 20., 30., 30., 20., 10., 10.,
        50., 50., 50., 50., 50., 50., 50., 50.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
    ];

    pub const KNIGHT_BONUSES: [f32; 64] = [
        -50.,-40.,-30.,-30.,-30.,-30.,-40.,-50.,
        -40.,-20.,  0.,  5.,  5.,  0.,-20.,-40.,
        -30.,  5., 10., 15., 15., 10.,  5.,-30.,
        -30.,  0., 15., 20., 20., 15.,  0.,-30.,
        -30.,  5., 15., 20., 20., 15.,  5.,-30.,
        -30.,  0., 10., 15., 15., 10.,  0.,-30.,
        -40.,-20.,  0.,  0.,  0.,  0.,-20.,-40.,
        -50.,-40.,-30.,-30.,-30.,-30.,-40.,-50.,
    ];

    pub const BISHOP_BONUSES: [f32; 64] = [
        -20.,-10.,-10.,-10.,-10.,-10.,-10.,-20.,
        -10.,  5.,  0.,  0.,  0.,  0.,  5.,-10.,
        -10., 10., 10., 10., 10., 10., 10.,-10.,
        -10.,  0., 10., 10., 10., 10.,  0.,-10.,
        -10.,  5.,  5., 10., 10.,  5.,  5.,-10.,
        -10.,  0.,  5., 10., 10.,  5.,  0.,-10.,
        -10.,  0.,  0.,  0.,  0.,  0.,  0.,-10.,
        -20.,-10.,-10.,-10.,-10.,-10.,-10.,-20.,
    ];

    pub const ROOK_BONUSES: [f32; 64] = [
         0.,  0.,  0.,  5.,  5.,  0.,  0.,  0.,
        -5.,  0.,  0.,  0.,  0.,  0.,  0., -5.,
        -5.,  0.,  0.,  0.,  0.,  0.,  0., -5.,
        -5.,  0.,  0.,  0.,  0.,  0.,  0., -5.,
        -5.,  0.,  0.,  0.,  0.,  0.,  0., -5.,
        -5.,  0.,  0.,  0.,  0.,  0.,  0., -5.,
         5., 10., 10., 10., 10., 10., 10.,  5.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
    ];

    pub const QUEEN_BONUSES: [f32; 64] = [
        -20.,-10.,-10., -5., -5.,-10.,-10.,-20.,
        -10.,  0.,  5.,  0.,  0.,  0.,  0.,-10.,
        -10.,  5.,  5.,  5.,  5.,  5.,  0.,-10.,
          0.,  0.,  5.,  5.,  5.,  5.,  0., -5.,
        - 5.,  0.,  5.,  5.,  5.,  5.,  0., -5.,
        -10.,  0.,  5.,  5.,  5.,  5.,  0.,-10.,
        -10.,  0.,  0.,  0.,  0.,  0.,  0.,-10.,
        -20.,-10.,-10., -5., -5.,-10.,-10.,-20.,
    ];

    pub const KING_BONUSES: [f32; 64] = [
         20., 30., 10.,  0.,  0., 10., 30., 20.,
         20., 20.,  0.,  0.,  0.,  0., 20., 20.,
        -10.,-20.,-20.,-20.,-20.,-20.,-20.,-10.,
        -20.,-30.,-30.,-40.,-40.,-30.,-30.,-20.,
        -30.,-40.,-40.,-50.,-50.,-40.,-40.,-30.,
        -30.,-40.,-40.,-50.,-50.,-40.,-40.,-30.,
        -30.,-40.,-40.,-50.,-50.,-40.,-40.,-30.,
        -30.,-40.,-40.,-50.,-50.,-40.,-40.,-30.,
    ];
}
